name: Playwright Tests
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

# Give the workflow  permission to deploy the pages inside 
permissions: 
  contents: read
  pages: write
  id-token: write

# Do not cancel in-progress runs as we want to allow there production deployment to complete

jobs:
  test-api:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1/2, 2/2]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm install -g pnpm && pnpm install
      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps
      - name: Run Playwright tests
        run: pnpm exec playwright test --shard ${{matrix.shard}} --grep @api
        env:
          BASE_URL: https://automationintesting.online/
          DEV_EMAIL: devkuku@sample-no.com
          PASSWORD: dev_spearcad
          DEVNAME: "Dev Kuku"
      - uses: actions/upload-artifact@v4
        name: Upload blob report to github actions artifacts
        if: always()
        with:
          name: merged-report-as-blob
          path: blob-report/
          retention-days: 14

  merge-reports: 
    if: always()
    needs: [test-api]
    runs-on: ubuntu-latest

    outputs:
      timestamp: ${{ steps.timestampid.outputs.timestamp }}

    steps:
    # Unique identifier
      - name: Set a timestamp
        id: timestampid
        run: echo "timestamp=$(date --utc +%Y%m%d_%H%M%SZ)" >> "$GITHUB_OUTPUT" 
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci

        # download artifacts
      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v3
        with:
          name: merged-reports-as-blob # name of the file stored as artifact (as uploaded at the previous job)
          path: downloaded-merged-reports-as-blob
      # Playwright will generate a report and store it inside a folder called '/playwright-report'
    - name: Merge the blobs into one single HTML Report
      run: npx playwright merge-reports --reporter html ./downloaded-merged-reports-as-blob

    - name: /[OPTIONAL] Upload full html report to artifacts for history
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-report-${{ steps.timestampid.outputs.timestamp }} # name of the file you want to have once its uploaded
        path: playwright-report # path where the reports are, from where to take the files
        retention-days: 14
     - name: Push the new files to github pages
    # This will create a separate branch called gh-pages where it will store only reports. And from where it will push all future changes 
    # to github pages. Having a separate branch will keep the reports and changes commits separate to your main/master
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./playwright-report # from what folder to take files. It takes only contents
        destination_dir: ${{ steps.timestampid.outputs.timestamp }} # a sub-directory where to publish to avoid overwriting other reports
        
    - name: Write URL in summary
      run: echo "### Test results (link available after 20 secs) - https://${{ github.repository_owner }}.github.io/playwright-example-with-typescript/${{ steps.timestampid.outputs.timestamp }}/" >> $GITHUB_STEP_SUMMARY

  # deploy:
  #   needs: test-api
  #   environment:
  #     name: github-pages
  #     url: $${{steps.deployment.outputs.page_url}}
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Deploy to Github Pages
  #     uses: action/deploy-pages@v3

  